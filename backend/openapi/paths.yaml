openapi: 3.0.3
info:
  title: Code Arena Newbies Coder
  description: |-
    Welcome to the Code Arena API! This API allows developers to access and integrate the functionality of Code Arena with other applications and to create new applications.
    ## Overview
    The Code Arena API provides programmatic access to our coding challenges platform. It allows you to:
    - Fetch a list of coding challenges
    - Submit solutions and get real-time feedback
    - Access user profiles and statistics
    - Participate in real-time coding battles

    Some useful links:
    - [Code Arena repository](https://github.com)
  contact:
    email: duongquocnam224400@gmail.com
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8080/api/v1
tags:
  - name: user
    description: Operations about user
    externalDocs:
      description: Feature user
      url: http://localhost:8080/api/v1/users
paths:
  /api/v1/users/login:
    post:
      tags:
        - user
      summary: Login user into the system
      description: User login into the system
      operationId: loginUser
      requestBody:
        description: Login information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginSchema'
        required: true
      responses:
        '200':
          description: Login successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    example: Login successfully
                  data:
                    $ref: '#/components/schemas/LoginSuccessAuth'
                  dateTime:
                    type: string
                    format: date-time
                    example: '2024-02-22T00:00:00.000Z'
        '400':
          description: Request that the password be checked again.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    example: The password entered is incorrect.
                  dateTime:
                    type: string
                    format: date-time
                    example: '2024-02-22T00:00:00.000Z'
        '404':
          description: Compare user data to the database.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    example: The email address doesn't exist. Please try the valid one or simply register
                  dateTime:
                    type: string
                    format: date-time
                    example: '2024-02-22T00:00:00.000Z'
        '422':
          description: Please provide complete input info.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    example: Validation error
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Please fill all required details.
                      path:
                        type: string
                        example: login
                  dateTime:
                    type: string
                    format: date-time
                    example: '2024-02-22T00:00:00.000Z'
  /api/v1/users/register:
    post:
      tags:
        - user
      summary: Register user into the system
      description: Register user into the system
      operationId: registerUser
      requestBody:
        description: Register information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSchema'
        required: true
      responses:
        '200':
          description: Send verification email register successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    example: Create account successfully. Please check email verify OTP!
                  data:
                    $ref: '#/components/schemas/RegisterSuccessAuth'
                  dateTime:
                    type: string
                    format: date-time
                    example: '2024-02-22T00:00:00.000Z'
        '404':
          description: Compare user data to the database.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    example: This email address is already in use. Please register with a different email address!
                  dateTime:
                    type: string
                    format: date-time
                    example: '2024-02-22T00:00:00.000Z'
        '422':
          description: Please provide complete input info.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    example: Validation error
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Please fill all required details.
                      path:
                        type: string
                        example: register
                  dateTime:
                    type: string
                    format: date-time
                    example: '2024-02-22T00:00:00.000Z'
  /api/v1/users/logout:
    post:
      tags:
        - user
      summary: Logs out current logged in user session
      description: Logs out current logged in user session
      operationId: logoutUser
      parameters: []
      security:
        - BearerAuth: []
      requestBody:
        description: Auth logout
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjRiZTBhZDJlNDNkMjQ2NDM5NGZlZWRiIiwidG9rZW5fdHlwZSI6MSwidmVyaWZ5IjoxLCJpYXQiOjE2OTEzODMyMjYsImV4cCI6MTcwMDAyMzIyNn0.bFnaBfxWl-Q48HCwAeMpNzZwTO9LEjcBd7Zyipjqr64
        required: true
      responses:
        '200':
          description: Logout successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    example: Logout successfully
                  data:
                    example: ''
                  dateTime:
                    type: string
                    format: date-time
                    example: '2024-02-22T00:00:00.000Z'
        '401':
          description: Header authorization is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    example: You are not currently logged in to the system!
                  data:
                    example: ''
                  dateTime:
                    type: string
                    format: date-time
                    example: '2024-02-22T00:00:00.000Z'
  /api/v1/users/verify-otp:
    post:
      tags:
        - user
      summary: User verify OTP
      description: User verify OTP
      operationId: verifyUserOTP
      requestBody:
        description: Auth verify OTP
        content:
          application/json:
            schema:
              type: object
              properties:
                otp:
                  type: string
                  example: '123456'
        required: true
      responses:
        default:
          description: successful operation
  /api/v1/users/resend-verify-otp:
    post:
      tags:
        - user
      summary: User verification OTP resent
      description: Send again to confirm the OTP user
      operationId: resendVerifyOTP
      parameters: []
      security:
        - BearerAuth: []
      responses:
        default:
          description: Resend verify OTP successfully
  /api/v1/users/refresh-token:
    post:
      tags:
        - user
      summary: Get back the access token
      description: Get back the access token
      operationId: refreshToken
      requestBody:
        description: Information to retrieve access token
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjRiZTBhZDJlNDNkMjQ2NDM5NGZlZWRiIiwidG9rZW5fdHlwZSI6MSwidmVyaWZ5IjoxLCJpYXQiOjE2OTEzODMyMjYsImV4cCI6MTcwMDAyMzIyNn0.bFnaBfxWl-Q48HCwAeMpNzZwTO9LEjcBd7Zyipjqr64
        required: true
      responses:
        '200':
          description: Successfully retrieved access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Refresh token success
                  result:
                    $ref: '#/components/schemas/RegisterSuccessAuth'
  /api/v1/users/forgot-password:
    post:
      tags:
        - user
      summary: Forgot password
      description: Forgot-password
      operationId: forgotPassword
      requestBody:
        description: Forgot password information
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user123@gmail.com
        required: true
      responses:
        '200':
          description: Receive a password reset email
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Check your email to reset your password
  /api/v1/users/reset-password:
    post:
      tags:
        - user
      summary: Reset password
      description: Reset
      operationId: resetPassword
      requestBody:
        description: Reset password imformation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordSchema'
        required: true
      responses:
        '200':
          description: Reset-password successfully
        '400':
          description: Invalid request data
  /api/v1/users/change-password:
    post:
      tags:
        - user
      summary: Change password
      description: User change-passowrd
      operationId: changePassword
      security:
        - BearerAuth: []
      requestBody:
        description: Change password imformation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordSchema'
        required: true
      responses:
        '200':
          description: Change password successfully
        '400':
          description: Invalid request data
  /api/v1/users/profile/{userId}:
    get:
      tags:
        - user
      summary: Get user by user_id
      description: Get user by user_id
      operationId: getUserByID
      parameters:
        - name: userId
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing.'
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileUserSchema'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    LoginSchema:
      type: object
      properties:
        email:
          type: string
          example: user1234@gmail.com
        password:
          type: string
          example: User@123
    LoginSuccessAuth:
      type: object
      properties:
        _id:
          type: string
          example: 656b0bbd3b0e9defe34fca1a
        email:
          type: string
          example: john@email.com
        username:
          type: string
          example: user123
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjRiZTBhZDJlNDNkMjQ2NDM5NGZlZWRiIiwidG9rZW5fdHlwZSI6MCwidmVyaWZ5IjoxLCJpYXQiOjE2OTEzODMyMjYsImV4cCI6MTY5MTQ2OTYyNn0.HTLX20cB7_z0c9c8FDg3MIx6RJEELHHlmJNZa94ku-o
    RegisterSuccessAuth:
      type: object
      properties:
        _id:
          type: string
          example: 656b0bbd3b0e9defe34fca1a
        email:
          type: string
          example: john@email.com
        username:
          type: string
          example: user123
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjRiZTBhZDJlNDNkMjQ2NDM5NGZlZWRiIiwidG9rZW5fdHlwZSI6MCwidmVyaWZ5IjoxLCJpYXQiOjE2OTEzODMyMjYsImV4cCI6MTY5MTQ2OTYyNn0.HTLX20cB7_z0c9c8FDg3MIx6RJEELHHlmJNZa94ku-o
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjRiZTBhZDJlNDNkMjQ2NDM5NGZlZWRiIiwidG9rZW5fdHlwZSI6MCwidmVyaWZ5IjoxLCJpYXQiOjE2OTEzODMyMjYsImV4cCI6MTY5MTQ2OTYyNn0.HTLX20cB7_z0c9c8FDg3MIx6RJEELHHlmJNZa94ku-o
    LogoutBody:
      type: object
      properties:
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjRiZTBhZDJlNDNkMjQ2NDM5NGZlZWRiIiwidG9rZW5fdHlwZSI6MCwidmVyaWZ5IjoxLCJpYXQiOjE2OTEzODMyMjYsImV4cCI6MTY5MTQ2OTYyNn0.HTLX20cB7_z0c9c8FDg3MIx6RJEELHHlmJNZa94ku-o
    ResetPasswordSchema:
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: 'admin@123'
        confirm_password:
          type: string
          example: 'admin@123'
    ChangePasswordSchema:
      type: object
      properties:
        old_password:
          type: string
          example: 'admin@1234'
        password:
          type: string
          example: 'admin@123'
        confirm_password:
          type: string
          example: 'admin@123'
    UserSchema:
      type: object
      properties:
        username:
          type: string
          example: 'user123'
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: 'admin@123'
        confirm_password:
          type: string
          example: 'admin@123'
        date_of_birth:
          type: string
          example: '2000-02-22T00:00:00.000Z'
    ProfileUserSchema:
      type: object
      properties:
        _id:
          type: integer
          format: int64
          example: 656b0bbd3b0e9defe34fca1a
        fullname:
          type: string
          example: 'User A'
        username:
          type: string
          example: 'user123'
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '53d71cd4a299ee96e3b1e899698f8767716bc00a80ec10b1d0d71e17'
        phone:
          type: string
          example: '0779381232'
        date_of_birth:
          type: string
          example: '2000-02-22T00:00:00.000Z'
        role:
          type: string
          example: USER
        forgot_password_token":
          type: string
          example: '2000-02-22T00:00:00.000Z'
        gender:
          type: string
          description: Gender Type
          example: Male
          enum:
            - Male
            - Female
            - Other
        verify:
          type: string
          description: Gender Type
          example: Male
          enum:
            - Unverify
            - Verify
            - Celebrity
            - Banned
        bio:
          type: string
          example: ''
        address:
          type: string
          example: ''
        website:
          type: string
          example: ''
        avatar:
          type: string
          example: ''
        cover_photo:
          type: string
          example: ''
        isOnline:
          type: boolean
          example: true
        _destroy:
          type: boolean
          example: false
        password_change_at:
          type: string
          format: date-time
          example: '2023-11-01T00:00:00.000Z'
        created_at:
          type: string
          format: date-time
          example: '2023-12-01T00:00:00.000Z'
        updated_at:
          type: string
          format: date-time
          example: '2023-12-02T00:00:00.000Z'
      xml:
        name: user
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
